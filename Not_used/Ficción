{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Import required libraries\n",
        "import google.generativeai as genai\n",
        "import os\n",
        "import json\n",
        "import random  # For theme randomization\n",
        "\n",
        "# Set up the Gemini API client\n",
        "api_key = \"AIzaSyAMVWspHCAo4P8Tld7dYF24jRUDbYILa6s\"  # Replace with your actual API key\n",
        "genai.configure(api_key=api_key)\n",
        "\n",
        "# Create the storage directory if it doesn't exist\n",
        "storage_dir = \"Storage\"\n",
        "temp_texts_dir = os.path.join(storage_dir, \"temp_texts\")\n",
        "os.makedirs(temp_texts_dir, exist_ok=True)\n",
        "\n",
        "# Define the genres\n",
        "genres = [\"sci-fi\", \"history\", \"mystery\", \"thriller\", \"horror\"]\n",
        "\n",
        "# Define themes for each genre to add variety\n",
        "themes = {\n",
        "    \"sci-fi\": [\n",
        "        \"space exploration\", \"time travel\", \"artificial intelligence\", \"alien contact\", \"dystopian future\",\n",
        "        \"cyberpunk\", \"post-apocalyptic survival\", \"intergalactic war\", \"virtual reality\", \"robot uprising\",\n",
        "        \"cloning and genetic engineering\", \"space colonization\", \"extraterrestrial life\", \"parallel universes\",\n",
        "        \"quantum physics mysteries\"\n",
        "    ],\n",
        "    \"history\": [\n",
        "        \"ancient civilizations\", \"medieval times\", \"world wars\", \"renaissance\", \"industrial revolution\",\n",
        "        \"colonialism and exploration\", \"revolutionary movements\", \"ancient mythology\", \"feudal Japan\",\n",
        "        \"victorian era\", \"cold war era\", \"golden age of piracy\", \"ancient trade routes\", \"cultural revolutions\",\n",
        "        \"lost empires\"\n",
        "    ],\n",
        "    \"mystery\": [\n",
        "        \"murder mystery\", \"heist\", \"espionage\", \"missing person\", \"conspiracy\",\n",
        "        \"private detective\", \"paranormal investigations\", \"unsolved crimes\", \"secret societies\", \"coded messages\",\n",
        "        \"historical mysteries\", \"crime scene analysis\", \"hidden identities\", \"cryptic clues\", \"double-cross\"\n",
        "    ],\n",
        "    \"thriller\": [\n",
        "        \"psychological thriller\", \"action thriller\", \"political intrigue\", \"crime thriller\", \"legal thriller\",\n",
        "        \"spy thriller\", \"survival thriller\", \"eco-thriller\", \"tech thriller\", \"military thriller\",\n",
        "        \"medical thriller\", \"domestic thriller\", \"financial thriller\", \"cultural thriller\", \"courtroom drama thriller\"\n",
        "    ],\n",
        "    \"horror\": [\n",
        "        \"supernatural\", \"psychological horror\", \"monster horror\", \"slasher\", \"gothic horror\",\n",
        "        \"body horror\", \"folk horror\", \"cosmic horror\", \"zombie apocalypse\", \"demonic possession\",\n",
        "        \"haunted houses\", \"creepy dolls\", \"vampire lore\", \"werewolf tales\", \"gore and splatter\"\n",
        "    ]\n",
        "}\n",
        "\n",
        "# Initialize the model\n",
        "model = genai.GenerativeModel('gemini-2.0-flash-thinking-exp')\n",
        "\n",
        "def generate_book_synopsis(genre):\n",
        "    \"\"\"Generate a diverse book synopsis for a specific genre using Gemini AI\"\"\"\n",
        "    # Randomly select a theme for the genre\n",
        "    theme = random.choice(themes[genre])\n",
        "\n",
        "    # Updated prompt with theme and originality focus\n",
        "    prompt = f\"\"\"Create an original and captivating 90-100 word synopsis for a {genre} book involving {theme},\n",
        "    along with a unique title, a fictional author name, a fitting Google font (with URL),\n",
        "    and a song that complements the reading experience. Provide the response in JSON format with the following structure:\n",
        "    {{\n",
        "        \"title\": \"Book Title\",\n",
        "        \"author\": \"Author Name\",\n",
        "        \"synopsis\": \"90-100 word engaging synopsis\",\n",
        "        \"font\": {{\n",
        "            \"name\": \"Font Name\",\n",
        "            \"url\": \"https://fonts.google.com/specimen/FontName\"\n",
        "        }},\n",
        "        \"song\": {{\n",
        "            \"title\": \"Song Title\",\n",
        "            \"artist\": \"Artist Name\"\n",
        "        }}\n",
        "    }}\n",
        "    \"\"\"\n",
        "\n",
        "    try:\n",
        "        # Generate content with increased creativity (adjust temperature if supported)\n",
        "        # Check Google Generative AI documentation for exact syntax\n",
        "        response = model.generate_content(prompt)  # Example parameter\n",
        "\n",
        "        # Extract JSON from the response\n",
        "        response_text = response.text\n",
        "\n",
        "        # Clean and parse the response\n",
        "        if \"```json\" in response_text:\n",
        "            json_str = response_text.split(\"```json\")[1].split(\"```\")[0].strip()\n",
        "        elif \"```\" in response_text:\n",
        "            json_str = response_text.split(\"```\")[1].strip()\n",
        "        else:\n",
        "            json_str = response_text\n",
        "\n",
        "        book_data = json.loads(json_str)\n",
        "        return book_data\n",
        "    except Exception as e:\n",
        "        print(f\"Error generating or parsing response for {genre}: {e}\")\n",
        "        return {\n",
        "            \"title\": f\"Error Generating {genre.capitalize()} Book\",\n",
        "            \"author\": \"Unknown\",\n",
        "            \"synopsis\": f\"There was an error generating the {genre} book synopsis. Please try again.\",\n",
        "            \"font\": {\"name\": \"Roboto\", \"url\": \"https://fonts.google.com/specimen/Roboto\"},\n",
        "            \"song\": {\"title\": \"Unknown\", \"artist\": \"Unknown\"}\n",
        "        }\n",
        "\n",
        "# Generate and save book synopses for each genre\n",
        "for i, genre in enumerate(genres, 1):\n",
        "    print(f\"Generating {genre} book synopsis...\")\n",
        "    book_data = generate_book_synopsis(genre)\n",
        "\n",
        "    # Save to JSON file\n",
        "    output_file = os.path.join(temp_texts_dir, f\"book_{i}.json\")\n",
        "    with open(output_file, 'w', encoding='utf-8') as f:\n",
        "        json.dump(book_data, f, indent=4)\n",
        "\n",
        "    print(f\"Saved {genre} book to {output_file}\")\n",
        "\n",
        "print(\"All book synopses have been generated and saved!\")"
      ],
      "metadata": {
        "id": "TP1e2Au04GrL"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
